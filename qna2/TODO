https://github.com/parkjaesung/slipp-201401-jwp 

02. To do list

* git 저장소 생성
* eclipse와 git 연동
* eclipse에서 maven 프로젝트 생성
* maven 설정

03. To do list
* maven에 wtp 설정 및 빌드
* hello.jsp 파일 생성
* wtp 프로젝트 배포
-------------------------------
* maven에 wtp 설정 및 빌드
	src-main-webapp폴더는 maven의 war플러그인으로 경로를 바꿀수 있다.
	<artifactId>maven-war-plugin</artifactId>
	
	이 프로젝트를 이클립스내에서 톰킷같은 웹어플리케이션 서버에 배포하기 위해 
	wtp플러그인을 사용할 것이고
	이를 가능하게 하려면 배포가능한 상태로 설정을 변경해 줘야 한다.
	<artifactId>maven-eclipse-plugin</artifactId>
	
	그리고 빌드를 하고 f5를 눌러주면 프로젝트에 지구모양이 생긴다.
	그러면 다이나믹프로젝트가 된다. 
	톰킷에 올릴 수 있다.

04. To do list
* spring mvc 라이브러리 추가
* spring 설정 파일 추가
* Controller 추가
* hello spring mvc 출력

* spring mvc 라이브러리 추가
	<groupId>org.springframework</groupId>
	
* spring 설정 파일 추가
	slipp -> WEB-INF/slipp-servlet.xml

05. To do list
* 메인 페이지 개발
* css, javascript image 적용을 위한 spring mvc 실행


06. To do list
* logback logging 프레임워크 적용
* eclipse template 추가

07. To do list
간단한 DI 설정 
스프링프레임워크 기반으로 DI설정
	logger
	${is1:import('org.slf4j.Logger')}${is2:import('org.slf4j.LoggerFactory')}private static final Logger log = LoggerFactory.getLogger(${primary_type_name}.class);
	springtest
	${is1:import('org.junit.runner.RunWith')}${is2:import('org.springframework.test.context.ContextConfiguration')}
	${is3:import('org.springframework.test.context.junit4.SpringJUnit4ClassRunner')}@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:/di.xml")

08. To do list
* 데이터베이스 설치 (자바에서 사용하는 h2설치
* Connection Pooling 설정
* 테이블 설계

09. To do list
* 테이블 스키마 초기화
* UserDao 구현
그리고 UserDao가 제대로 작동하는지 create( )를 통해서 알아보았다
${is1:importStatic('org.hamcrest.CoreMatchers.*')}${is2:import('org.junit.Assert.*')}

10. To do list
* web.xml에 applicationContext.xml 로딩하도록 설정
* UserController와 UserDao 의존관계 설정























	
